{"componentChunkName":"component---src-templates-blog-post-js","path":"/building-firebase-functions-declarations/","result":{"data":{"site":{"siteMetadata":{"title":"Things I've Learnt"}},"markdownRemark":{"id":"ee0b7021-3593-51d8-aa72-175801fe0710","excerpt":"firebase-functions-declarations is a tool that creates declaration files for a given set of Firebase Functions. When using it, instead of writing: And not…","html":"<p><a href=\"https://github.com/dutzi/firebase-functions-declarations\"><strong>firebase-functions-declarations</strong></a> is a tool that creates declaration files for a given set of Firebase Functions.</p>\n<p>When using it, instead of writing:</p>\n<!-- prettier-ignore -->\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> firebase<span class=\"token punctuation\">.</span><span class=\"token function\">functions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">httpsCallable</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myFunction'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>data</code></pre></div>\n<p>And not knowing what <code class=\"language-text\">response</code> is what or <code class=\"language-text\">data</code> should contain, you write:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> myFunction <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./firebase-functions'</span>\n\n<span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Where <code class=\"language-text\">response</code> will be typed to be whatever <code class=\"language-text\">myFunction</code> returns, and <code class=\"language-text\">data</code> will be type checked, making sure you provide the right type.</p>\n<h2>How it works</h2>\n<p>When creating Firebase Function you’d normally create an index file which imports all function and exports them. This is the entry point for Firebase Functions.</p>\n<p>Each function module usually looks something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> functions<span class=\"token punctuation\">.</span>https<span class=\"token punctuation\">.</span><span class=\"token function\">onCall</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// firebase function body...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ideally, my tool would “scrape” the function passed to <code class=\"language-text\">functions.https.onCall</code> and infer its argument and return types.</p>\n<p>This could be done using the <a href=\"https://github.com/microsoft/TypeScript/wiki/Using-the-Compiler-API\">TypeScript compiler</a> and other tools (like <a href=\"https://github.com/phenomnomnominal/tsquery\">ts-query</a> or <a href=\"https://github.com/dsherret/ts-morph\">ts-morph</a>), but because I only learnt about these methods after making this tool I went for a different approach. Maybe someday I’ll revisit this tool and introduce these changes, but for now it’s good enough.</p>\n<h3>Step 1 - Creating the Declarations</h3>\n<p>My approach was to require the author of the function to introduce the following change the function’s module - in addition to <code class=\"language-text\">default export</code>-ing the return value of <code class=\"language-text\">functions.https.onCall</code>, export the callback <em>passed to</em> <code class=\"language-text\">functions.https.onCall</code> as a function named <code class=\"language-text\">impl</code>.</p>\n<p>For example, the following file is valid for my tool to work:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">impl</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">:</span> functions<span class=\"token punctuation\">.</span>https<span class=\"token punctuation\">.</span>CallableContext</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// do something, return some value of type U</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> functions<span class=\"token punctuation\">.</span>https<span class=\"token punctuation\">.</span><span class=\"token function\">onCall</span><span class=\"token punctuation\">(</span>impl<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Then, using <code class=\"language-text\">tsc</code>, I can create declaration files for each one of the functions by running:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ tsc ./functions/src/index.ts --outDir ./src/firebase-functions --emitDeclarationOnly --declaration</code></pre></div>\n<p>Now <code class=\"language-text\">src/firebase-functions</code> should contain .d.ts files for all modules within <code class=\"language-text\">functions/src</code>.</p>\n<h3>Step 2 - Creating The “Proxy” Module</h3>\n<p>Now that I have declarations files for the API, I can create a module that:</p>\n<ul>\n<li>Imports <code class=\"language-text\">firebase</code> from <code class=\"language-text\">firebase/app</code>, since this file will eventually make the call to <code class=\"language-text\">firebase.functions().httpsCallable</code>.</li>\n<li>Imports all functions. Here’s one import statement for example:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> impl <span class=\"token keyword\">as</span> myFunctionImpl <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./functions/my-function'</span></code></pre></div>\n<div class=\"sidenote\">\n<p><strong>Note:</strong> Since I ran <code class=\"language-text\">tsc</code> emitting declaration files only, <code class=\"language-text\">functions/my-function.ts</code> does <strong>not</strong> exist, but <code class=\"language-text\">functions/my-function.d.ts</code> does and that’s all I need.</p>\n</div>\n<ul>\n<li>\n<p>Per each function, exports a function with the same name, that:</p>\n<ul>\n<li>Accepts a <code class=\"language-text\">data</code> argument who’s type is inferred from the relevant .d.ts file</li>\n<li>Returns a promise that resolves to what the function returns</li>\n</ul>\n</li>\n</ul>\n<p>This can be achieved using TypeScript’s <a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html#parameterst\"><code class=\"language-text\">Parameters</code></a> and <a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html#returntypet\"><code class=\"language-text\">ReturnType</code></a> utility types.</p>\n<p>Here’s an exported function for example:</p>\n<!-- prettier-ignore -->\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> Parameters<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> myFunctionImpl<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> firebase<span class=\"token punctuation\">.</span><span class=\"token function\">functions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">httpsCallable</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myFunction'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>data <span class=\"token keyword\">as</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> myFunctionImpl<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And there you have it, a module that exposes typed functions for your API!</p>\n<h2>Caveats</h2>\n<p>As I wrote above, this whole making-the-user-do-stuff for this tool to work is not the best approach, especially since this work <em>can</em> be automated. But, the counter approach of making-me-do-stuff-for-the-user is also not the best one since I’m lazy.</p>\n<p>But that’s not what I wanted to raise, the bigger problem with such a tool is that when the types exposed in a function’s signature are ones declared within the Firebase Functions package’s <code class=\"language-text\">node_modules</code>. In this case there is no way to share types betweens the functions and app’s codebase.</p>\n<p>I made some pretty big projects so far using Firebase and haven’t encountered this issue. But I can image some pretty trivial use cases where this might be a deal-breaker.</p>\n<div class=\"dependencies\">\n<p><strong>Dependencies:</strong>\n<span class=\"dep\"><a href=\"https://npmjs.com/package/fs-extra\">fs-extra</a></span>\n<span class=\"dep\"><a href=\"https://npmjs.com/package/runscript\">runscript</a></span>\n<span class=\"dep\"><a href=\"https://npmjs.com/package/rimraf\">rimraf</a></span>\n<span class=\"dep\"><a href=\"https://npmjs.com/package/camelcase\">camelcase</a></span></p>\n</div>","frontmatter":{"title":"Things I've Learnt Building Firebase Functions Declarations","date":"January 04, 2020","description":"Making a simple tool that creates declaration files for your Firebase Functions taught me a few things. Here they are."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/building-firebase-functions-declarations/","previous":{"fields":{"slug":"/using-find-index/"},"frontmatter":{"title":"Things You Should Know About Array.findIndex"}},"next":{"fields":{"slug":"/optional-chaining/"},"frontmatter":{"title":"Optional Chaining Do's and Dont's"}}}}}