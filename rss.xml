<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Things I've Learnt]]></title><description><![CDATA[Things I learnt building stuff.]]></description><link>https://dutzi.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Sat, 04 Jan 2020 06:28:19 GMT</lastBuildDate><item><title><![CDATA[Things I've Learnt Using VSCode]]></title><description><![CDATA[VSCode is one hell of an editor. About two years after it was initially announced I started using it regularly, and, as much as I cherish…]]></description><link>https://dutzi.github.io/using-vscode/</link><guid isPermaLink="false">https://dutzi.github.io/using-vscode/</guid><pubDate>Sat, 04 Jan 2020 06:26:28 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;&lt;strong&gt;VSCode&lt;/strong&gt;&lt;/a&gt; is one hell of an editor. About two years after it was initially announced I started using it regularly, and, as much as I cherish Sublime Text, I haven’t looked back since.&lt;/p&gt;
&lt;p&gt;Here are some of my favorite extensions.&lt;/p&gt;
&lt;h2&gt;Naming Is Hard&lt;/h2&gt;
&lt;p&gt;Naming things is one of the toughest problems I encounter daily while programming.&lt;/p&gt;
&lt;p&gt;A lot of times I would google the not-so-good name I came up with just to see when comes up.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=brunnerh.altervista-thesaurus&quot;&gt;Altervista Thesaurus&lt;/a&gt;, &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=FordLabs.cinnanyms&quot;&gt;Cinnanyms&lt;/a&gt; and &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Compulim.compulim-vscode-dictionary&quot;&gt;Dictionary Lookup&lt;/a&gt; all try solving this issue by listing synonyms of whatever word you give them.&lt;/p&gt;
&lt;p&gt;It’s nice and it helps some of the time. But sometimes the word I’m looking for isn’t an equivalent of some word. Sometimes I’ll have a word, and I’ll want to know what is it a type of. For example, the word “example” is a type of “representation”. For that, I’ll use &lt;a href=&quot;https://www.wordsapi.com/&quot;&gt;Words API&lt;/a&gt;. No VSCode extension for it yet.&lt;/p&gt;
&lt;h2&gt;Editing Utils&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=wmaurer.change-case&quot;&gt;Change Case&lt;/a&gt; has been in my toolbelt since I’ve been using Sublime Text. I am using it so much that I’ve set up the following keybindings for it:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;cmd+i cmd+k&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;extension.changeCase.kebab&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;cmd+i cmd+c&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;extension.changeCase.camel&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;cmd+i cmd+p&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;extension.changeCase.pascal&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;cmd+i cmd+s&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;extension.changeCase.snake&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;cmd+i cmd+t&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token property&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;extension.changeCase.title&quot;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=letrieu.expand-region&quot;&gt;Expand Region&lt;/a&gt; - This one lets you bind a keyboard shortcut to expanding and contracting the selected region, having a GIF explain it makes so much sense, so check out the GIF in the link.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost&quot;&gt;Import Cost&lt;/a&gt; - Displays the size of an imported 3rd party module, next to the import statement. Doesn’t &lt;em&gt;always&lt;/em&gt; work for me, but when it does it’s really neat. Save the hassle of going to &lt;a href=&quot;https://bundlephobia.com/&quot;&gt;Bundle Phobia&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=nmsmith89.incrementor&quot;&gt;Incrementor&lt;/a&gt; - Lets you bind a keyboard shortcut to increment/decrement the value within the current selection(s). I used to havily depend on this one but haven’t much since I moved to VSCode. Maybe you’ll find it useful though.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Asuka.insertnumbers&quot;&gt;Insert Numbers&lt;/a&gt; - Insert a range of numbers to all cursor positions. Useful for large variety of use cases.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Cardinal90.multi-cursor-case-preserve&quot;&gt;Multiple Cursor Case Preserve&lt;/a&gt; - Got a curser over a bunch of words cased differently? Once you start typing, this extensions will preserve the casing under each selection. I use this one a lot!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense&quot;&gt;Path Intellisense&lt;/a&gt; - Autocompletes paths as you write them. I’ve been using this one so much and it feels so natural that I’m not even sure this wasn’t baked into VSCode already.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=earshinov.permute-lines&quot;&gt;Permute Lines&lt;/a&gt; - As the name suggests, this one exposes some nice line manipulation tools.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=mlewand.select-part-of-word&quot;&gt;Select Part Of Word&lt;/a&gt; - This one lets you traverse camel-cased words easily.&lt;/p&gt;
&lt;h2&gt;Diff&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ryu1kn.partial-diff&quot;&gt;Partial Diff&lt;/a&gt; - VSCode has a nice UI for diffing files. This extension lets you enjoy that UI when diffing between a wider variety of input sources (files, clipboard and current selection), so you can diff between the contents of your clipboard and your current selection.&lt;/p&gt;
&lt;h2&gt;Files&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=nemesv.copy-file-name&quot;&gt;Copy File Name&lt;/a&gt; is useful in projects where the filenames are the names of the classes/functions they contain. With it I can Cmd+Shift+P &gt; Type “cfn” &gt; Enter, then paste it somewhere I need it, and using the kybindings for Change Case, change its case to whatever.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=sleistner.vscode-fileutils&quot;&gt;File Utils&lt;/a&gt; - This extension adds some use file manipulation commands to the Command Palette.&lt;/p&gt;
&lt;h2&gt;Others&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=nidu.copy-json-path&quot;&gt;Copy JSON Path&lt;/a&gt; is very useful in all sorts of use cases. One that pops to my mind immediately when thinking about this extension is where you need to specifiy the getter string (or JSON path) for an i18n string that resides in some lengthy JSON.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=artdiniz.quitcontrol-vscode&quot;&gt;Quit Control for VSCode&lt;/a&gt; - Quit control will pop a message making sure you really want to leave once you hit Cmd+Q / Cmd+Shift+W. This one saved me so many times.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Things I've Learnt Building How-Dep]]></title><description><![CDATA[How-dep is a CLI tool that analyzes your TypeScript1 project, counting how many imports it encounters per each module your project depends…]]></description><link>https://dutzi.github.io/building-how-dep/</link><guid isPermaLink="false">https://dutzi.github.io/building-how-dep/</guid><pubDate>Fri, 03 Jan 2020 22:37:14 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://github.com/dutzi/how-dep&quot;&gt;&lt;strong&gt;How-dep&lt;/strong&gt;&lt;/a&gt; is a CLI tool that analyzes your TypeScript&lt;sup&gt;1&lt;/sup&gt; project, counting how many imports it encounters per each module your project depends on.&lt;/p&gt;
&lt;p&gt;How-dep generates both a CLI report and a living, breathing HTML report. &lt;a href=&quot;https://dutzi.github.io/how-dep/example-report&quot;&gt;Here’s&lt;/a&gt; an example of one.&lt;/p&gt;
&lt;p&gt;To run how-dep, first install it (&lt;code class=&quot;language-text&quot;&gt;yarn global add how-dep&lt;/code&gt;), then run it in your project’s root folder (&lt;code class=&quot;language-text&quot;&gt;how-dep&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Here’s the gist of what I’ve learnt building it.&lt;/p&gt;
&lt;h2&gt;Statically Analyzing a TypeScript File&lt;/h2&gt;
&lt;!-- Or, **Easily Traversing and Querying a TS File** --&gt;
&lt;p&gt;First, I needed a way to get all the module &lt;code class=&quot;language-text&quot;&gt;imports&lt;/code&gt; within a project. TS Query seemed pretty useful for that cause.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/phenomnomnominal/tsquery&quot;&gt;TS Query&lt;/a&gt; is a tool that allows you to query a TypeScript file for nodes (AST nodes), using a CSS selector-ish type syntax.&lt;/p&gt;
&lt;p&gt;For example, running the following query will return all the functions who’s name is “foo” (or more accurately, the nodes of the &lt;em&gt;names&lt;/em&gt; of the functions)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;FunctionDeclaration &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; Identifier&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;name&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;first&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;child&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can play with it &lt;a href=&quot;https://tsquery-playground.firebaseapp.com/&quot;&gt;here&lt;/a&gt;, it’s pretty cool.&lt;/p&gt;
&lt;p&gt;Using TS Query I was able to easily find all import statements and generate a report accordingly.&lt;/p&gt;
&lt;h2&gt;Rendering An HTML File From The CLI&lt;/h2&gt;
&lt;!-- ### Utilizing React&apos;s SSR abilities to generate simple HTML file --&gt;
&lt;p&gt;Rendering a report &lt;em&gt;to&lt;/em&gt; the CLI is easy, simply log whatever you want and use &lt;a href=&quot;https://github.com/chalk/chalk&quot;&gt;chalk&lt;/a&gt; to color it up. Rendering an HTML report is not too complicated either, when utilizing React’s SSR abilities.&lt;/p&gt;
&lt;p&gt;After creating a simple React based report (&lt;strong&gt;&lt;a href=&quot;https://github.com/dutzi/how-dep/blob/master/src/web/App.tsx&quot;&gt;the app&lt;/a&gt;&lt;/strong&gt;), I needed a way to dump it out into an HTML file and present it to the user. &lt;code class=&quot;language-text&quot;&gt;renderToString&lt;/code&gt; was a simple way to do it.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;ReactDOMServer.renderToString&lt;/code&gt; will take a React Element, and spit out the HTML that renders that node.&lt;/p&gt;
&lt;p&gt;Dump its output to a temporary file, give it a name, and you have a static page that renders your app:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;tsx&quot;&gt;&lt;pre class=&quot;language-tsx&quot;&gt;&lt;code class=&quot;language-tsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; ReactDOMServer &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react-dom/server&apos;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; fs &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;fs-extra&apos;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; tempDirectory &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;temp-dir&apos;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; outputHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ReactDOMServer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;renderToString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; outputFilePath &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;tempDirectory&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;/how-dep-report.html&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;

fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;writeFileSync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;outputFilePath&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; outputHTML&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;!-- ## hydrate --&gt;
&lt;h2&gt;Bringing Your Static HTML to Life&lt;/h2&gt;
&lt;p&gt;When rendering using React’s &lt;code class=&quot;language-text&quot;&gt;renderToString&lt;/code&gt; you end up with an HTML file, all your hooks and event listeners are not part of it, the HTML only contains the markup that’s needed to render the app on the client side &lt;em&gt;until&lt;/em&gt; the JS bundle that brings it to life arrives. To bring your React app to life you’ll have to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Load ReactDOM from the dumb HTML file&lt;/li&gt;
&lt;li&gt;Load the React app (we’ll bundle it using Webpack)&lt;/li&gt;
&lt;li&gt;Run &lt;code class=&quot;language-text&quot;&gt;ReactDOM.hydrate&lt;/code&gt;, passing it the app and the HTML node the app is currently rendered in&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, first, lets bundle ReactDOM and the app we’ve made and dump it with all the rest into our dumb HTML file, to do that we’ll use Webpack.&lt;/p&gt;
&lt;p&gt;Out of the box Webpack comes with sensible defaults, enough for us to simply give it an entry file, an output path and watch it bundle it up.&lt;/p&gt;
&lt;p&gt;Since I’m not an animal, I’ve used TypeScript when building how-dep, but since I’m too lazy to create a &lt;code class=&quot;language-text&quot;&gt;webpack.config.js&lt;/code&gt; file, I’ve used the TypeScript compiler to generate the JS files by adding the following to my package.json scripts map:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;build:watch&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;tsc --watch&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I’ve set TSC to transpile the TS files into a folder named “dist”.&lt;/p&gt;
&lt;p&gt;Then, I’ve added the following scripts to my package.json:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;webpack:build&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;webpack dist/web/App.js --mode=production -o ./dist/web/bundle.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;webpack:watch&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;npm run webpack:build -- --watch&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first one runs Webpack on &lt;code class=&quot;language-text&quot;&gt;App.js&lt;/code&gt;, bundling it and all its dependencies into &lt;code class=&quot;language-text&quot;&gt;dist/web/bundle.js&lt;/code&gt;, the second one simply runs the first one in &lt;strong&gt;watch mode&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I’ve also added the following script:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;concurrently \&quot;npm:build:watch\&quot; \&quot;npm:webpack:watch\&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which uses &lt;a href=&quot;https://github.com/kimmobrunfeldt/concurrently&quot;&gt;Concurrently&lt;/a&gt; to run both npm scripts at the same time, this was useful when developing how-dep, greatly improving the feedback loop.&lt;/p&gt;
&lt;p&gt;So now that we’ve got TSC and Webpack up and running, we have a bundled JS file we can consume from our dumb HTML report file so we can bring it life.&lt;/p&gt;
&lt;p&gt;To consume the bundled JS we’ll simply place it within a &lt;code class=&quot;language-text&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag which we’ll render using the &lt;code class=&quot;language-text&quot;&gt;renderToString&lt;/code&gt; call we made earlier.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;tsx&quot;&gt;&lt;pre class=&quot;language-tsx&quot;&gt;&lt;code class=&quot;language-tsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; ouputHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ReactDOMServer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;renderToString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;
      &lt;span class=&quot;token attr-name&quot;&gt;dangerouslySetInnerHTML&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        __html&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; fs
          &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__dirname&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;/web/bundle.js&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, our HTML contains our bundled app, we just need to call &lt;code class=&quot;language-text&quot;&gt;ReactDOM.hydrate&lt;/code&gt; once it loads.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;tsx&quot;&gt;&lt;pre class=&quot;language-tsx&quot;&gt;&lt;code class=&quot;language-tsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;NODE_ENV&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;production&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;load&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hydrate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A few things to note about the block above, first, we only run it in production mode, so that when how-dep renders the app (i.e., when the user runs &lt;code class=&quot;language-text&quot;&gt;how-dep&lt;/code&gt; from the CLI) that piece of code won’t run. We don’t want it to run since the CLI runs in Node which has no clue what &lt;code class=&quot;language-text&quot;&gt;window&lt;/code&gt; is.&lt;/p&gt;
&lt;p&gt;Second, adding the load event listener is simply good practice, it’s there so that no matter where I place that bundle’s &lt;code class=&quot;language-text&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag, it will only run &lt;em&gt;after&lt;/em&gt; the the app’s markup has rendered.&lt;/p&gt;
&lt;p&gt;At this point, the app renders fine initially, but once React’s hydration starts the data is gone and nothing gets rendered.&lt;/p&gt;
&lt;p&gt;That’s because the app expects some props, which are now missing.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;tsx&quot;&gt;&lt;pre class=&quot;language-tsx&quot;&gt;&lt;code class=&quot;language-tsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; data &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To pass that data, we to add it serialize it and dump it out the HTML file.&lt;/p&gt;
&lt;p&gt;Adding the follwing &lt;code class=&quot;language-text&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag within the module responsible of rendering the HTML file will expose everything we need through an object on the window:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;tsx&quot;&gt;&lt;pre class=&quot;language-tsx&quot;&gt;&lt;code class=&quot;language-tsx&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;script
  dangerouslySetInnerHTML&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    __html&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;window.__HOW_DEP = {
      data: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;,
    }&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So now, revisiting our code from before, we can write:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;tsx&quot;&gt;&lt;pre class=&quot;language-tsx&quot;&gt;&lt;code class=&quot;language-tsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;NODE_ENV&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;production&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;load&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hydrate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;gatsby-highlight-code-line&quot;&gt;        &lt;span class=&quot;token attr-name&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;window &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;__HOW_DEP&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;      &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And our HTML should now render fine once fully loaded. Amazing!&lt;/p&gt;
&lt;h2&gt;Styling the App, the Lazy Way&lt;/h2&gt;
&lt;p&gt;Revisiting my previous point, I really didn’t feel like creating a &lt;code class=&quot;language-text&quot;&gt;webpack.config.js&lt;/code&gt; file for this project. Having React and Webpack bundled within a CLI tool seemed crazy enough, and I was too lazy to read the docs.&lt;/p&gt;
&lt;p&gt;So when the problem of styling the app came up, importing css files was out of the question.&lt;/p&gt;
&lt;p&gt;Instead, I used good-ol’ &lt;a href=&quot;https://www.styled-components.com/&quot;&gt;Styled Components&lt;/a&gt;. Following their docs I simply had to add the following to my html rederer:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;tsx&quot;&gt;&lt;pre class=&quot;language-tsx&quot;&gt;&lt;code class=&quot;language-tsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ServerStyleSheet &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;styled-components&apos;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sheet &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ServerStyleSheet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; outputAppBody &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ReactDOMServer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;renderToString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  sheet&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;collectStyles&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* script tags and app go here...  */&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; styleTags &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; sheet&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getStyleTags&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; outputHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; styleTags &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; outputAppBody&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Adding a Title and a Favicon&lt;/h2&gt;
&lt;p&gt;Adding both a title and favicon means dealing with the HTML’s &lt;code class=&quot;language-text&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag. To do that in SSR world I used &lt;a href=&quot;https://github.com/nfl/react-helmet&quot;&gt;React Helmet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the favicon to work, I decided to base64 encode it and bake it into a React component. I think I’ve used &lt;a href=&quot;https://www.base64-image.de/&quot;&gt;this tool&lt;/a&gt; for it, though I’m not sure.&lt;/p&gt;
&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; How-dep supports JavaScript as well, just provide it with a basic tsconfig.json file&lt;/p&gt;
&lt;div class=&quot;dependencies&quot;&gt;
&lt;p&gt;&lt;strong&gt;Dependencies:&lt;/strong&gt;
&lt;span class=&quot;dep&quot;&gt;&lt;a href=&quot;https://npmjs.com/package/@phenomnomnominal/tsquery&quot;&gt;@phenomnomnominal/tsquery&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;dep&quot;&gt;&lt;a href=&quot;https://npmjs.com/package/yargs&quot;&gt;yargs&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;dep&quot;&gt;&lt;a href=&quot;https://npmjs.com/package/concurrently&quot;&gt;concurrently&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;dep&quot;&gt;&lt;a href=&quot;https://npmjs.com/package/fs-extra&quot;&gt;fs-extra&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;dep&quot;&gt;&lt;a href=&quot;https://npmjs.com/package/openurl&quot;&gt;openurl&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;dep&quot;&gt;&lt;a href=&quot;https://npmjs.com/package/react&quot;&gt;react&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;dep&quot;&gt;&lt;a href=&quot;https://npmjs.com/package/react-dom&quot;&gt;react-dom&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;dep&quot;&gt;&lt;a href=&quot;https://npmjs.com/package/react-helmet&quot;&gt;react-helmet&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;dep&quot;&gt;&lt;a href=&quot;https://npmjs.com/package/styled-components&quot;&gt;styled-components&lt;/a&gt;&lt;/span&gt;
&lt;span class=&quot;dep&quot;&gt;&lt;a href=&quot;https://npmjs.com/package/temp-dir&quot;&gt;temp-dir&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;</content:encoded></item></channel></rss>